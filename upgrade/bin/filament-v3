#!/usr/bin/env php
<?php

if (file_exists('config/filament-support.php')) {
    unlink('config/filament-support.php');
}

if (file_exists('config/forms.php')) {
    unlink('config/forms.php');
}

if (file_exists('config/notifications.php')) {
    unlink('config/notifications.php');
}

if (file_exists('config/tables.php')) {
    unlink('config/tables.php');
}

$hasIndividualFilamentPackagesInstalled = false;

foreach (array_merge(
    glob('resources/css/*.css'),
    glob('resources/css/**/*.css'),
) as $file) {
    $fileContents = file_get_contents($file);

    if (str_contains($fileContents, 'filament/forms/dist/module.esm.css')) {
        $hasIndividualFilamentPackagesInstalled = true;
    }

    $fileContents = str_replace('filament/forms/dist/module.esm.css', 'filament/forms/dist/index.css', $fileContents);

    file_put_contents($file, $fileContents);
}

foreach (array_merge(
    glob('resources/js/*.js'),
    glob('resources/js/**/*.js'),
) as $file) {
    $fileContents = file_get_contents($file);

    if (
        str_contains($fileContents, 'FormsAlpinePlugin') ||
        str_contains($fileContents, 'NotificationsAlpinePlugin')
    ) {
        $hasIndividualFilamentPackagesInstalled = true;
    }

    $fileContents = preg_replace('/import FormsAlpinePlugin from \'..\/..\/vendor\/filament\/forms\/dist\/module\.esm\';?\n/', '', $fileContents);
    $fileContents = preg_replace('/import NotificationsAlpinePlugin from \'..\/..\/vendor\/filament\/notifications\/dist\/module\.esm\';?\n/', '', $fileContents);
    $fileContents = preg_replace('/Alpine\.plugin\(FormsAlpinePlugin\);?\n/', '', $fileContents);
    $fileContents = preg_replace('/Alpine\.plugin\(NotificationsAlpinePlugin\);?\n/', '', $fileContents);

    file_put_contents($file, $fileContents);
}

if (file_exists('tailwind.config.js')) {
    $config = file_get_contents('tailwind.config.js');

    if (! str_contains($config, 'darkMode')) {
        $config = str_replace('module.exports = {', "module.exports = {\n    darkMode: 'class',", $config);

        file_put_contents('tailwind.config.js', $config);
    }
}

if ($hasIndividualFilamentPackagesInstalled) {
    foreach (array_merge(
        glob('resources/views/*.blade.php'),
        glob('resources/views/**/*.blade.php'),
    ) as $file) {
        $fileContents = file_get_contents($file);

        $fileContents = str_replace('@livewireStyles', "@livewireStyles\n        @filamentStyles", $fileContents);
        $fileContents = str_replace('@livewireScripts', "@filamentScripts\n        @livewireScripts", $fileContents);

        file_put_contents($file, $fileContents);
    }
}

$getEnvValue = function (string $env, string $variable): ?string {
    preg_match("/^{$variable}=(.*)$/m", $env, $matches);

    $value = $matches[1] ?? null;

    if ($value === null) {
        return null;
    }

    $value = trim($value);

    if ($value === '') {
        return null;
    }

    return $value;
};

$hasEnvVariable = function (string $env, string $variable): bool {
    return preg_match("/^{$variable}=(.*)$/m", $env) === 1;
};

$removeEnvVariable = function (string &$env, string $variable): string {
    return $env = preg_replace("/^{$variable}=(.*)$/m", '', $env);
};

$renameEnvVariable = function (string &$env, string $oldVariable, string $newVariable): string {
    return $env = preg_replace("/^{$oldVariable}=(.*)$/m", "{$newVariable}=$1", $env);
};

$setEnvVariable = function (string &$env, string $variable, string $value): string {
    return $env = preg_replace("/^{$variable}=(.*)$/m", "{$variable}={$value}", $env);
};

foreach (['.env', '.env.ci', '.env.example', '.env.testing'] as $envFile) {
    if (file_exists($envFile)) {
        $env = file_get_contents($envFile);

        $env = (function (string $env) use ($getEnvValue, $hasEnvVariable, $removeEnvVariable, $renameEnvVariable, $setEnvVariable) {
            $disk = $getEnvValue($env, 'FILAMENT_FILESYSTEM_DRIVER') ??
                $getEnvValue($env, 'FORMS_FILESYSTEM_DRIVER') ??
                $getEnvValue($env, 'TABLES_FILESYSTEM_DRIVER');

            if ($disk === null) {
                $removeEnvVariable($env, 'FILAMENT_FILESYSTEM_DRIVER');
                $removeEnvVariable($env, 'FORMS_FILESYSTEM_DRIVER');
                $removeEnvVariable($env, 'TABLES_FILESYSTEM_DRIVER');

                return $env;
            }

            if ($hasEnvVariable($env, 'FILAMENT_FILESYSTEM_DRIVER')) {
                $renameEnvVariable($env, 'FILAMENT_FILESYSTEM_DRIVER', 'FILAMENT_FILESYSTEM_DISK');
                $setEnvVariable($env, 'FILAMENT_FILESYSTEM_DISK', $disk);

                $removeEnvVariable($env, 'FORMS_FILESYSTEM_DRIVER');
                $removeEnvVariable($env, 'TABLES_FILESYSTEM_DRIVER');

                return $env;
            }

            if ($hasEnvVariable($env, 'FORMS_FILESYSTEM_DRIVER')) {
                $renameEnvVariable($env, 'FORMS_FILESYSTEM_DRIVER', 'FILAMENT_FILESYSTEM_DISK');
                $setEnvVariable($env, 'FILAMENT_FILESYSTEM_DISK', $disk);

                $removeEnvVariable($env, 'TABLES_FILESYSTEM_DRIVER');

                return $env;
            }

            if ($hasEnvVariable($env, 'TABLES_FILESYSTEM_DRIVER')) {
                $renameEnvVariable($env, 'TABLES_FILESYSTEM_DRIVER', 'FILAMENT_FILESYSTEM_DISK');
                $setEnvVariable($env, 'FILAMENT_FILESYSTEM_DISK', $disk);

                return $env;
            }

            return $env;
        })($env);

        file_put_contents($envFile, $env);
    }
}

$appDirectory = $argv[1] ?? 'app';
exec("vendor/bin/rector process {$appDirectory} --config vendor/filament/upgrade/src/rector.php --clear-cache");
