{
  "version": 3,
  "sources": ["../../resources/js/components/key-value.js"],
  "sourcesContent": ["export default function keyValueFormComponent({ state }) {\n    return {\n        state,\n\n        rows: [],\n\n        shouldUpdateRows: true,\n\n        init: function () {\n            this.updateRows()\n\n            if (this.rows.length <= 0) {\n                this.addRow()\n            }\n\n            this.shouldUpdateRows = true\n\n            this.$watch('state', () => {\n                if (!this.shouldUpdateRows) {\n                    this.shouldUpdateRows = true\n\n                    return\n                }\n\n                this.updateRows()\n            })\n        },\n\n        addRow: function () {\n            this.rows.push({ key: '', value: '' })\n\n            this.updateState()\n        },\n\n        deleteRow: function (index) {\n            this.rows.splice(index, 1)\n\n            if (this.rows.length <= 0) {\n                this.addRow()\n            }\n\n            this.updateState()\n\n            this.shouldUpdateRows = true\n        },\n\n        reorderRows: function (event) {\n            const rows = Alpine.raw(this.rows)\n\n            const reorderedRow = rows.splice(event.oldIndex, 1)[0]\n            rows.splice(event.newIndex, 0, reorderedRow)\n\n            this.rows = rows\n\n            this.updateState()\n        },\n\n        updateRows: function () {\n            let rows = []\n\n            for (let [key, value] of Object.entries(this.state ?? {})) {\n                rows.push({\n                    key,\n                    value,\n                })\n            }\n\n            this.rows = rows\n        },\n\n        updateState: function () {\n            let state = {}\n\n            this.rows.forEach((row) => {\n                if (row.key === '' || row.key === null) {\n                    return\n                }\n\n                state[row.key] = row.value\n            })\n\n            // This is a hack to prevent the component from updating rows again\n            // after a state update, which would otherwise be done by the `state`\n            // watcher. If rows are updated again, duplicate keys are removed.\n            //\n            // https://github.com/filamentphp/filament/issues/1107\n            this.shouldUpdateRows = false\n\n            this.state = state\n        },\n    }\n}\n"],
  "mappings": "AAAe,SAARA,EAAuC,CAAE,MAAAC,CAAM,EAAG,CACrD,MAAO,CACH,MAAAA,EAEA,KAAM,CAAC,EAEP,iBAAkB,GAElB,KAAM,UAAY,CACd,KAAK,WAAW,EAEZ,KAAK,KAAK,QAAU,GACpB,KAAK,OAAO,EAGhB,KAAK,iBAAmB,GAExB,KAAK,OAAO,QAAS,IAAM,CACvB,GAAI,CAAC,KAAK,iBAAkB,CACxB,KAAK,iBAAmB,GAExB,OAGJ,KAAK,WAAW,CACpB,CAAC,CACL,EAEA,OAAQ,UAAY,CAChB,KAAK,KAAK,KAAK,CAAE,IAAK,GAAI,MAAO,EAAG,CAAC,EAErC,KAAK,YAAY,CACrB,EAEA,UAAW,SAAUC,EAAO,CACxB,KAAK,KAAK,OAAOA,EAAO,CAAC,EAErB,KAAK,KAAK,QAAU,GACpB,KAAK,OAAO,EAGhB,KAAK,YAAY,EAEjB,KAAK,iBAAmB,EAC5B,EAEA,YAAa,SAAUC,EAAO,CAC1B,IAAMC,EAAO,OAAO,IAAI,KAAK,IAAI,EAE3BC,EAAeD,EAAK,OAAOD,EAAM,SAAU,CAAC,EAAE,CAAC,EACrDC,EAAK,OAAOD,EAAM,SAAU,EAAGE,CAAY,EAE3C,KAAK,KAAOD,EAEZ,KAAK,YAAY,CACrB,EAEA,WAAY,UAAY,CACpB,IAAIA,EAAO,CAAC,EAEZ,OAAS,CAACE,EAAKC,CAAK,IAAK,OAAO,QAAQ,KAAK,OAAS,CAAC,CAAC,EACpDH,EAAK,KAAK,CACN,IAAAE,EACA,MAAAC,CACJ,CAAC,EAGL,KAAK,KAAOH,CAChB,EAEA,YAAa,UAAY,CACrB,IAAIH,EAAQ,CAAC,EAEb,KAAK,KAAK,QAASO,GAAQ,CACnBA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,OAIlCP,EAAMO,EAAI,GAAG,EAAIA,EAAI,MACzB,CAAC,EAOD,KAAK,iBAAmB,GAExB,KAAK,MAAQP,CACjB,CACJ,CACJ",
  "names": ["keyValueFormComponent", "state", "index", "event", "rows", "reorderedRow", "key", "value", "row"]
}
